{
    "docs": [
        {
            "location": "/", 
            "text": "CTMCEnsemble.jl Documentation\n\n\n#\n\n\nCTMCEnsemble.average\n \n \nFunction\n.\n\n\naverage(preds, weights=nothing; multiplicity=true)\n\n\n\n\nCompute the average. \nmultiplicity\n for arithmetic mean based on mulitpiliciity.\n\n\nExample\n\n\njulia\n average([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])])\n3-element Array{Float64,1}:\n 0.333333\n 0.333333\n 0.333333\n\njulia\n average([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])], multiplicity=false)\n3-element Array{Float64,1}:\n 0.25\n 0.5\n 0.25\n\njulia\n A = [0.5 0.2 0.1 0.3; 0.5 0.8 0.9 0.7]\n2\u00d74 Array{Float64,2}:\n 0.5  0.2  0.1  0.3\n 0.5  0.8  0.9  0.7\n\njulia\n B = [0.5 0.1 0.2 0.7; 0.5 0.9 0.8 0.3]\n2\u00d74 Array{Float64,2}:\n 0.5  0.1  0.2  0.7\n 0.5  0.9  0.8  0.3\n\njulia\n average([(A, [1, 2]), (B, [2, 3])])\n3\u00d74 Array{Float64,2}:\n 0.333333  0.129032  0.0689655  0.230769\n 0.333333  0.290323  0.37931    0.538462\n 0.333333  0.580645  0.551724   0.230769\n\njulia\n average([(A, [1, 2]), (B, [2, 3])], multiplicity=false)\n3\u00d74 Array{Float64,2}:\n 0.25  0.1   0.05  0.15\n 0.5   0.45  0.55  0.7\n 0.25  0.45  0.4   0.15\n\n\n\n\nsource\n\n\n#\n\n\nCTMCEnsemble.ctmc\n \n \nFunction\n.\n\n\nctmc(preds, weights=nothing)\n\n\n\n\nCompute stationary distribution by CTMC method.\n\n\nExample\n\n\njulia\n ctmc([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])])\n3-element Array{Float64,1}:\n 0.333333\n 0.333333\n 0.333333\n\njulia\n A = [0.5 0.2 0.1 0.3; 0.5 0.8 0.9 0.7]\n2\u00d74 Array{Float64,2}:\n 0.5  0.2  0.1  0.3\n 0.5  0.8  0.9  0.7\n\njulia\n B = [0.5 0.1 0.2 0.7; 0.5 0.9 0.8 0.3]\n2\u00d74 Array{Float64,2}:\n 0.5  0.1  0.2  0.7\n 0.5  0.9  0.8  0.3\n\njulia\n ctmc([(A, [1, 2]), (B, [2, 3])])\n3\u00d74 Array{Float64,2}:\n 0.333333  0.0243902  0.0217391  0.230769\n 0.333333  0.097561   0.195652   0.538462\n 0.333333  0.878049   0.782609   0.230769\n\n\n\n\nsource\n\n\n#\n\n\nCTMCEnsemble.powermethod\n \n \nFunction\n.\n\n\npowermethod(preds, weights=nothing; maxiter=16)\n\n\n\n\nCompute stationary distribution by power method.\n\n\nExample\n\n\njulia\n powermethod([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])], maxiter=16)\n3-element Array{Float64,1}:\n 0.333333\n 0.333333\n 0.333333\n\njulia\n A = [0.5 0.2 0.1 0.3; 0.5 0.8 0.9 0.7]\n2\u00d74 Array{Float64,2}:\n 0.5  0.2  0.1  0.3\n 0.5  0.8  0.9  0.7\n\njulia\n B = [0.5 0.1 0.2 0.7; 0.5 0.9 0.8 0.3]\n2\u00d74 Array{Float64,2}:\n 0.5  0.1  0.2  0.7\n 0.5  0.9  0.8  0.3\n\njulia\n powermethod([(A, [1, 2]), (B, [2, 3])])\n3\u00d74 Array{Float64,2}:\n 0.333333  0.0244257  0.0217406  0.230769\n 0.333333  0.0976007  0.195655   0.538462\n 0.333333  0.877974   0.782604   0.230769\n\n\n\n\nsource\n\n\n#\n\n\nCTMCEnsemble.product\n \n \nFunction\n.\n\n\nproduct(preds, weights=nothing; multiplicity=true)\n\n\n\n\nCompute the product. \nmultiplicity\n for geometric mean based on mulitpiliciity.\n\n\nExample\n\n\njulia\n product([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])])\n3-element Array{Float64,1}:\n 0.333333\n 0.333333\n 0.333333\n\njulia\n product([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])], multiplicity=false)\n3-element Array{Float64,1}:\n 0.4\n 0.2\n 0.4\n\njulia\n A = [0.5 0.2 0.1 0.3; 0.5 0.8 0.9 0.7]\n2\u00d74 Array{Float64,2}:\n 0.5  0.2  0.1  0.3\n 0.5  0.8  0.9  0.7\n\njulia\n B = [0.5 0.1 0.2 0.7; 0.5 0.9 0.8 0.3]\n2\u00d74 Array{Float64,2}:\n 0.5  0.1  0.2  0.7\n 0.5  0.9  0.8  0.3\n\njulia\n product([(A, [1, 2]), (B, [2, 3])])\n3\u00d74 Array{Float64,2}:\n 0.333333  0.14463   0.0755136  0.230769\n 0.333333  0.204537  0.320377   0.538462\n 0.333333  0.650833  0.604109   0.230769\n\njulia\n product([(A, [1, 2]), (B, [2, 3])], multiplicity=false)\n3\u00d74 Array{Float64,2}:\n 0.4  0.169492   0.0925926  0.275229\n 0.2  0.0677966  0.166667   0.449541\n 0.4  0.762712   0.740741   0.275229\n\n\n\n\nsource\n\n\n#\n\n\nCTMCEnsemble.svdmethod\n \n \nFunction\n.\n\n\nsvdmethod(preds, weights=nothing; maxiter=16)\n\n\n\n\nCompute stationary distribution by svd method.\n\n\nExample\n\n\njulia\n svdmethod([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])])\n3-element Array{Float64,1}:\n 0.333333\n 0.333333\n 0.333333\n\njulia\n A = [0.5 0.2 0.1 0.3; 0.5 0.8 0.9 0.7]\n2\u00d74 Array{Float64,2}:\n 0.5  0.2  0.1  0.3\n 0.5  0.8  0.9  0.7\n\njulia\n B = [0.5 0.1 0.2 0.7; 0.5 0.9 0.8 0.3]\n2\u00d74 Array{Float64,2}:\n 0.5  0.1  0.2  0.7\n 0.5  0.9  0.8  0.3\n\njulia\n svdmethod([(A, [1, 2]), (B, [2, 3])])\n3\u00d74 Array{Float64,2}:\n 0.333333  0.0243902  0.0217391  0.230769\n 0.333333  0.097561   0.195652   0.538462\n 0.333333  0.878049   0.782609   0.230769\n\n\n\n\nsource\n\n\n#\n\n\nCTMCEnsemble.build\n \n \nFunction\n.\n\n\nbuild(preds, weights=nothing; nclass=0)\n\n\n\n\nBuild the generator matrix.\n\n\nExample\n\n\njulia\n CTMCEnsemble.build([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])])\n3\u00d73 Array{Float64,2}:\n -0.5   0.5   0.0\n  0.5  -1.0   0.5\n  0.0   0.5  -0.5\n\n\n\n\nsource\n\n\n#\n\n\nCTMCEnsemble.stationdist\n \n \nMethod\n.\n\n\nstationdist(G)\n\n\n\n\nCompute stationary probability distribution given generator $G$.\n\n\nExample\n\n\njulia\n G = CTMCEnsemble.build([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])]);\n\njulia\n CTMCEnsemble.stationdist(G)\n3-element Array{Float64,1}:\n 0.333333\n 0.333333\n 0.333333\n\n\n\n\nsource", 
            "title": "Home"
        }, 
        {
            "location": "/#ctmcensemblejl-documentation", 
            "text": "#  CTMCEnsemble.average     Function .  average(preds, weights=nothing; multiplicity=true)  Compute the average.  multiplicity  for arithmetic mean based on mulitpiliciity.  Example  julia  average([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])])\n3-element Array{Float64,1}:\n 0.333333\n 0.333333\n 0.333333\n\njulia  average([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])], multiplicity=false)\n3-element Array{Float64,1}:\n 0.25\n 0.5\n 0.25\n\njulia  A = [0.5 0.2 0.1 0.3; 0.5 0.8 0.9 0.7]\n2\u00d74 Array{Float64,2}:\n 0.5  0.2  0.1  0.3\n 0.5  0.8  0.9  0.7\n\njulia  B = [0.5 0.1 0.2 0.7; 0.5 0.9 0.8 0.3]\n2\u00d74 Array{Float64,2}:\n 0.5  0.1  0.2  0.7\n 0.5  0.9  0.8  0.3\n\njulia  average([(A, [1, 2]), (B, [2, 3])])\n3\u00d74 Array{Float64,2}:\n 0.333333  0.129032  0.0689655  0.230769\n 0.333333  0.290323  0.37931    0.538462\n 0.333333  0.580645  0.551724   0.230769\n\njulia  average([(A, [1, 2]), (B, [2, 3])], multiplicity=false)\n3\u00d74 Array{Float64,2}:\n 0.25  0.1   0.05  0.15\n 0.5   0.45  0.55  0.7\n 0.25  0.45  0.4   0.15  source  #  CTMCEnsemble.ctmc     Function .  ctmc(preds, weights=nothing)  Compute stationary distribution by CTMC method.  Example  julia  ctmc([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])])\n3-element Array{Float64,1}:\n 0.333333\n 0.333333\n 0.333333\n\njulia  A = [0.5 0.2 0.1 0.3; 0.5 0.8 0.9 0.7]\n2\u00d74 Array{Float64,2}:\n 0.5  0.2  0.1  0.3\n 0.5  0.8  0.9  0.7\n\njulia  B = [0.5 0.1 0.2 0.7; 0.5 0.9 0.8 0.3]\n2\u00d74 Array{Float64,2}:\n 0.5  0.1  0.2  0.7\n 0.5  0.9  0.8  0.3\n\njulia  ctmc([(A, [1, 2]), (B, [2, 3])])\n3\u00d74 Array{Float64,2}:\n 0.333333  0.0243902  0.0217391  0.230769\n 0.333333  0.097561   0.195652   0.538462\n 0.333333  0.878049   0.782609   0.230769  source  #  CTMCEnsemble.powermethod     Function .  powermethod(preds, weights=nothing; maxiter=16)  Compute stationary distribution by power method.  Example  julia  powermethod([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])], maxiter=16)\n3-element Array{Float64,1}:\n 0.333333\n 0.333333\n 0.333333\n\njulia  A = [0.5 0.2 0.1 0.3; 0.5 0.8 0.9 0.7]\n2\u00d74 Array{Float64,2}:\n 0.5  0.2  0.1  0.3\n 0.5  0.8  0.9  0.7\n\njulia  B = [0.5 0.1 0.2 0.7; 0.5 0.9 0.8 0.3]\n2\u00d74 Array{Float64,2}:\n 0.5  0.1  0.2  0.7\n 0.5  0.9  0.8  0.3\n\njulia  powermethod([(A, [1, 2]), (B, [2, 3])])\n3\u00d74 Array{Float64,2}:\n 0.333333  0.0244257  0.0217406  0.230769\n 0.333333  0.0976007  0.195655   0.538462\n 0.333333  0.877974   0.782604   0.230769  source  #  CTMCEnsemble.product     Function .  product(preds, weights=nothing; multiplicity=true)  Compute the product.  multiplicity  for geometric mean based on mulitpiliciity.  Example  julia  product([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])])\n3-element Array{Float64,1}:\n 0.333333\n 0.333333\n 0.333333\n\njulia  product([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])], multiplicity=false)\n3-element Array{Float64,1}:\n 0.4\n 0.2\n 0.4\n\njulia  A = [0.5 0.2 0.1 0.3; 0.5 0.8 0.9 0.7]\n2\u00d74 Array{Float64,2}:\n 0.5  0.2  0.1  0.3\n 0.5  0.8  0.9  0.7\n\njulia  B = [0.5 0.1 0.2 0.7; 0.5 0.9 0.8 0.3]\n2\u00d74 Array{Float64,2}:\n 0.5  0.1  0.2  0.7\n 0.5  0.9  0.8  0.3\n\njulia  product([(A, [1, 2]), (B, [2, 3])])\n3\u00d74 Array{Float64,2}:\n 0.333333  0.14463   0.0755136  0.230769\n 0.333333  0.204537  0.320377   0.538462\n 0.333333  0.650833  0.604109   0.230769\n\njulia  product([(A, [1, 2]), (B, [2, 3])], multiplicity=false)\n3\u00d74 Array{Float64,2}:\n 0.4  0.169492   0.0925926  0.275229\n 0.2  0.0677966  0.166667   0.449541\n 0.4  0.762712   0.740741   0.275229  source  #  CTMCEnsemble.svdmethod     Function .  svdmethod(preds, weights=nothing; maxiter=16)  Compute stationary distribution by svd method.  Example  julia  svdmethod([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])])\n3-element Array{Float64,1}:\n 0.333333\n 0.333333\n 0.333333\n\njulia  A = [0.5 0.2 0.1 0.3; 0.5 0.8 0.9 0.7]\n2\u00d74 Array{Float64,2}:\n 0.5  0.2  0.1  0.3\n 0.5  0.8  0.9  0.7\n\njulia  B = [0.5 0.1 0.2 0.7; 0.5 0.9 0.8 0.3]\n2\u00d74 Array{Float64,2}:\n 0.5  0.1  0.2  0.7\n 0.5  0.9  0.8  0.3\n\njulia  svdmethod([(A, [1, 2]), (B, [2, 3])])\n3\u00d74 Array{Float64,2}:\n 0.333333  0.0243902  0.0217391  0.230769\n 0.333333  0.097561   0.195652   0.538462\n 0.333333  0.878049   0.782609   0.230769  source  #  CTMCEnsemble.build     Function .  build(preds, weights=nothing; nclass=0)  Build the generator matrix.  Example  julia  CTMCEnsemble.build([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])])\n3\u00d73 Array{Float64,2}:\n -0.5   0.5   0.0\n  0.5  -1.0   0.5\n  0.0   0.5  -0.5  source  #  CTMCEnsemble.stationdist     Method .  stationdist(G)  Compute stationary probability distribution given generator $G$.  Example  julia  G = CTMCEnsemble.build([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])]);\n\njulia  CTMCEnsemble.stationdist(G)\n3-element Array{Float64,1}:\n 0.333333\n 0.333333\n 0.333333  source", 
            "title": "CTMCEnsemble.jl Documentation"
        }
    ]
}