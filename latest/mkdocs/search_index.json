{
    "docs": [
        {
            "location": "/", 
            "text": "CTMCEnsemble.jl Documentation\n\n\n#\n\n\nCTMCEnsemble.average\n \n \nFunction\n.\n\n\naverage(preds, weights=nothing; multiplicity=true)\n\n\n\n\nCompute the degree-weighted average.\n\n\nExample\n\n\njulia\n average([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])])\n3-element Array{Float64,1}:\n 0.333333\n 0.333333\n 0.333333\n\n\n\n\nsource\n\n\n#\n\n\nCTMCEnsemble.ctmc\n \n \nFunction\n.\n\n\nctmc(preds, weights=nothing)\n\n\n\n\nCompute stationary distribution by CTMC method.\n\n\nExample\n\n\n```jldoctest julia\n ctmc([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])], maxiter=16) 3-element Array{Float64,1}:  0.333333  0.333333  0.333333\n\n\nsource\n\n\n#\n\n\nCTMCEnsemble.powermethod\n \n \nFunction\n.\n\n\npowermethod(preds, weights=nothing; maxiter=16)\n\n\n\n\nCompute stationary distribution by power method.\n\n\nExample\n\n\n```jldoctest julia\n powermethod([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])], maxiter=16) 3-element Array{Float64,1}:  0.333333  0.333333  0.333333\n\n\nsource\n\n\n#\n\n\nCTMCEnsemble.product\n \n \nFunction\n.\n\n\nproduct(preds, weights=nothing; multiplicity=true)\n\n\n\n\nCompute the degree-weighted product.\n\n\nExample\n\n\njulia\n product([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])])\n3-element Array{Float64,1}:\n 0.333333\n 0.333333\n 0.333333\n\n\n\n\nsource\n\n\n#\n\n\nCTMCEnsemble.svdmethod\n \n \nFunction\n.\n\n\nsvdmethod(preds, weights=nothing; maxiter=16)\n\n\n\n\nCompute stationary distribution by svd method.\n\n\nExample\n\n\n```jldoctest julia\n svdmethod([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])], maxiter=16) 3-element Array{Float64,1}:  0.333333  0.333333  0.333333\n\n\nsource\n\n\n#\n\n\nCTMCEnsemble.build\n \n \nFunction\n.\n\n\nbuild(preds, weights=nothing; nclass=0)\n\n\n\n\nBuild the generator matrix.\n\n\nExample\n\n\njulia\n CTMCEnsemble.build([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])])\n3\u00d73 Array{Float64,2}:\n -0.5   0.5   0.0\n  0.5  -1.0   0.5\n  0.0   0.5  -0.5\n\n\n\n\nsource\n\n\n#\n\n\nCTMCEnsemble.stationdist\n \n \nMethod\n.\n\n\nstationdist(G)\n\n\n\n\nCompute stationary probability distribution given generator $G$.\n\n\nExample\n\n\njulia\n G = CTMCEnsemble.build([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])]);\n\njulia\n CTMCEnsemble.stationdist(G)\n3-element Array{Float64,1}:\n 0.333333\n 0.333333\n 0.333333\n\n\n\n\nsource", 
            "title": "Home"
        }, 
        {
            "location": "/#ctmcensemblejl-documentation", 
            "text": "#  CTMCEnsemble.average     Function .  average(preds, weights=nothing; multiplicity=true)  Compute the degree-weighted average.  Example  julia  average([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])])\n3-element Array{Float64,1}:\n 0.333333\n 0.333333\n 0.333333  source  #  CTMCEnsemble.ctmc     Function .  ctmc(preds, weights=nothing)  Compute stationary distribution by CTMC method.  Example  ```jldoctest julia  ctmc([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])], maxiter=16) 3-element Array{Float64,1}:  0.333333  0.333333  0.333333  source  #  CTMCEnsemble.powermethod     Function .  powermethod(preds, weights=nothing; maxiter=16)  Compute stationary distribution by power method.  Example  ```jldoctest julia  powermethod([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])], maxiter=16) 3-element Array{Float64,1}:  0.333333  0.333333  0.333333  source  #  CTMCEnsemble.product     Function .  product(preds, weights=nothing; multiplicity=true)  Compute the degree-weighted product.  Example  julia  product([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])])\n3-element Array{Float64,1}:\n 0.333333\n 0.333333\n 0.333333  source  #  CTMCEnsemble.svdmethod     Function .  svdmethod(preds, weights=nothing; maxiter=16)  Compute stationary distribution by svd method.  Example  ```jldoctest julia  svdmethod([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])], maxiter=16) 3-element Array{Float64,1}:  0.333333  0.333333  0.333333  source  #  CTMCEnsemble.build     Function .  build(preds, weights=nothing; nclass=0)  Build the generator matrix.  Example  julia  CTMCEnsemble.build([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])])\n3\u00d73 Array{Float64,2}:\n -0.5   0.5   0.0\n  0.5  -1.0   0.5\n  0.0   0.5  -0.5  source  #  CTMCEnsemble.stationdist     Method .  stationdist(G)  Compute stationary probability distribution given generator $G$.  Example  julia  G = CTMCEnsemble.build([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])]);\n\njulia  CTMCEnsemble.stationdist(G)\n3-element Array{Float64,1}:\n 0.333333\n 0.333333\n 0.333333  source", 
            "title": "CTMCEnsemble.jl Documentation"
        }
    ]
}