{
    "docs": [
        {
            "location": "/", 
            "text": "CTMCEnsemble.jl Documentation\n\n\n#\n\n\nCTMCEnsemble.average\n \n \nFunction\n.\n\n\naverage(preds, weights=nothing; multiplicity=true)\n\n\n\n\nCompute the average. \nmultiplicity\n for arithmetic mean based on mulitpiliciity.\n\n\nExample\n\n\njulia\n average([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])])\n3-element Array{Float64,1}:\n 0.333333\n 0.333333\n 0.333333\n\njulia\n average([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])], multiplicity=false)\n3-element Array{Float64,1}:\n 0.25\n 0.5\n 0.25\n\njulia\n A = [0.5 0.2 0.1 0.3; 0.5 0.8 0.9 0.7]\n2\u00d74 Array{Float64,2}:\n 0.5  0.2  0.1  0.3\n 0.5  0.8  0.9  0.7\n\njulia\n B = [0.5 0.1 0.2 0.7; 0.5 0.9 0.8 0.3]\n2\u00d74 Array{Float64,2}:\n 0.5  0.1  0.2  0.7\n 0.5  0.9  0.8  0.3\n\njulia\n average([(A, [1, 2]), (B, [2, 3])])\n3\u00d74 Array{Float64,2}:\n 0.333333  0.129032  0.0689655  0.230769\n 0.333333  0.290323  0.37931    0.538462\n 0.333333  0.580645  0.551724   0.230769\n\njulia\n average([(A, [1, 2]), (B, [2, 3])], multiplicity=false)\n3\u00d74 Array{Float64,2}:\n 0.25  0.1   0.05  0.15\n 0.5   0.45  0.55  0.7\n 0.25  0.45  0.4   0.15\n\n\n\n\nsource\n\n\n#\n\n\nCTMCEnsemble.ctmc\n \n \nFunction\n.\n\n\nctmc(preds, weights=nothing)\n\n\n\n\nCompute stationary distribution by CTMC method.\n\n\nExample\n\n\njulia\n ctmc([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])])\n3-element Array{Float64,1}:\n 0.333333\n 0.333333\n 0.333333\n\njulia\n A = [0.5 0.2 0.1 0.3; 0.5 0.8 0.9 0.7]\n2\u00d74 Array{Float64,2}:\n 0.5  0.2  0.1  0.3\n 0.5  0.8  0.9  0.7\n\njulia\n B = [0.5 0.1 0.2 0.7; 0.5 0.9 0.8 0.3]\n2\u00d74 Array{Float64,2}:\n 0.5  0.1  0.2  0.7\n 0.5  0.9  0.8  0.3\n\njulia\n ctmc([(A, [1, 2]), (B, [2, 3])])\n3\u00d74 Array{Float64,2}:\n 0.333333  0.0243902  0.0217391  0.230769\n 0.333333  0.097561   0.195652   0.538462\n 0.333333  0.878049   0.782609   0.230769\n\n\n\n\nsource\n\n\n#\n\n\nCTMCEnsemble.powermethod\n \n \nFunction\n.\n\n\npowermethod(preds, weights=nothing; maxiter=16)\n\n\n\n\nCompute stationary distribution by power method.\n\n\nExample\n\n\njulia\n powermethod([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])], maxiter=16)\n3-element Array{Float64,1}:\n 0.333333\n 0.333333\n 0.333333\n\njulia\n A = [0.5 0.2 0.1 0.3; 0.5 0.8 0.9 0.7]\n2\u00d74 Array{Float64,2}:\n 0.5  0.2  0.1  0.3\n 0.5  0.8  0.9  0.7\n\njulia\n B = [0.5 0.1 0.2 0.7; 0.5 0.9 0.8 0.3]\n2\u00d74 Array{Float64,2}:\n 0.5  0.1  0.2  0.7\n 0.5  0.9  0.8  0.3\n\njulia\n powermethod([(A, [1, 2]), (B, [2, 3])])\n3\u00d74 Array{Float64,2}:\n 0.333333  0.0244257  0.0217406  0.230769\n 0.333333  0.0976007  0.195655   0.538462\n 0.333333  0.877974   0.782604   0.230769\n\n\n\n\nsource\n\n\n#\n\n\nCTMCEnsemble.product\n \n \nFunction\n.\n\n\nproduct(preds, weights=nothing; multiplicity=true)\n\n\n\n\nCompute the product. \nmultiplicity\n for geometric mean based on mulitpiliciity.\n\n\nExample\n\n\njulia\n product([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])])\n3-element Array{Float64,1}:\n 0.333333\n 0.333333\n 0.333333\n\njulia\n product([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])], multiplicity=false)\n3-element Array{Float64,1}:\n 0.4\n 0.2\n 0.4\n\njulia\n A = [0.5 0.2 0.1 0.3; 0.5 0.8 0.9 0.7]\n2\u00d74 Array{Float64,2}:\n 0.5  0.2  0.1  0.3\n 0.5  0.8  0.9  0.7\n\njulia\n B = [0.5 0.1 0.2 0.7; 0.5 0.9 0.8 0.3]\n2\u00d74 Array{Float64,2}:\n 0.5  0.1  0.2  0.7\n 0.5  0.9  0.8  0.3\n\njulia\n product([(A, [1, 2]), (B, [2, 3])])\n3\u00d74 Array{Float64,2}:\n 0.333333  0.14463   0.0755136  0.230769\n 0.333333  0.204537  0.320377   0.538462\n 0.333333  0.650833  0.604109   0.230769\n\njulia\n product([(A, [1, 2]), (B, [2, 3])], multiplicity=false)\n3\u00d74 Array{Float64,2}:\n 0.4  0.169492   0.0925926  0.275229\n 0.2  0.0677966  0.166667   0.449541\n 0.4  0.762712   0.740741   0.275229\n\n\n\n\nsource\n\n\n#\n\n\nCTMCEnsemble.softmax!\n \n \nMethod\n.\n\n\nsoftmax!(data)\n\n\n\n\nInplace softmax col-wise.\n\n\nExample\n\n\njulia\n p = [0.49  0.09  0.71  0.07  0.28\n            0.73  0.48  0.01  0.96  0.51\n            0.87  0.09  0.76  0.63  0.39\n            0.37  0.65  0.89  0.31  0.42\n            0.6   0.49  0.19  0.21  0.77\n            0.56  0.32  0.27  1.0   0.92\n            0.5   0.83  0.99  0.4   0.81\n            0.34  0.03  0.83  0.07  0.62\n            0.93  0.75  0.15  0.37  0.21\n            0.25  0.19  0.83  0.69  0.64];\n\njulia\n softmax!(p)\n10\u00d75 Array{Float64,2}:\n 0.018823   0.0126174  0.0234549  0.0123676  0.0152576\n 0.0239287  0.0186357  0.0116474  0.0301167  0.0192033\n 0.0275246  0.0126174  0.0246575  0.0216516  0.0170318\n 0.0166945  0.022089   0.0280806  0.0157223  0.0175504\n 0.0210117  0.018823   0.0139444  0.0142261  0.0249053\n 0.0201878  0.0158803  0.0151058  0.0313458  0.0289358\n 0.0190122  0.0264453  0.0310339  0.0172029  0.0259217\n 0.0162011  0.0118827  0.0264453  0.0123676  0.0214362\n 0.0292266  0.0244121  0.0133977  0.0166945  0.0142261\n 0.0148067  0.0139444  0.0264453  0.0229905  0.0218692\n\n\n\n\nsource\n\n\n#\n\n\nCTMCEnsemble.svdmethod\n \n \nFunction\n.\n\n\nsvdmethod(preds, weights=nothing; maxiter=16)\n\n\n\n\nCompute stationary distribution by svd method.\n\n\nExample\n\n\njulia\n svdmethod([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])])\n3-element Array{Float64,1}:\n 0.333333\n 0.333333\n 0.333333\n\njulia\n A = [0.5 0.2 0.1 0.3; 0.5 0.8 0.9 0.7]\n2\u00d74 Array{Float64,2}:\n 0.5  0.2  0.1  0.3\n 0.5  0.8  0.9  0.7\n\njulia\n B = [0.5 0.1 0.2 0.7; 0.5 0.9 0.8 0.3]\n2\u00d74 Array{Float64,2}:\n 0.5  0.1  0.2  0.7\n 0.5  0.9  0.8  0.3\n\njulia\n svdmethod([(A, [1, 2]), (B, [2, 3])])\n3\u00d74 Array{Float64,2}:\n 0.333333  0.0243902  0.0217391  0.230769\n 0.333333  0.097561   0.195652   0.538462\n 0.333333  0.878049   0.782609   0.230769\n\n\n\n\nsource\n\n\n#\n\n\nCTMCEnsemble.top1\n \n \nMethod\n.\n\n\ntop1(data, label)\n\n\n\n\nTop-1 accuracy.\n\n\nExample\n\n\njulia\n p = [0.333333  0.0243902  0.0217391  0.230769\n            0.333333  0.097561   0.195652   0.538462\n            0.333333  0.878049   0.782609   0.230769];\n\njulia\n top1(p, [1, 3, 3, 2])\n1.0\n\n\n\n\nsource\n\n\n#\n\n\nCTMCEnsemble.top5\n \n \nMethod\n.\n\n\ntop5(data, label)\n\n\n\n\nTop-5 accuracy.\n\n\nExample\n\n\njulia\n p = [0.49  0.09  0.71  0.07  0.28\n            0.73  0.48  0.01  0.96  0.51\n            0.87  0.09  0.76  0.63  0.39\n            0.37  0.65  0.89  0.31  0.42\n            0.6   0.49  0.19  0.21  0.77\n            0.56  0.32  0.27  1.0   0.92\n            0.5   0.83  0.99  0.4   0.81\n            0.34  0.03  0.83  0.07  0.62\n            0.93  0.75  0.15  0.37  0.21\n            0.25  0.19  0.83  0.69  0.64];\n\njulia\n top5(p, 1:5)\n0.6\n\n\n\n\nsource\n\n\n#\n\n\nCTMCEnsemble.build\n \n \nFunction\n.\n\n\nbuild(preds, weights=nothing; nclass=0)\n\n\n\n\nBuild the generator matrix.\n\n\nExample\n\n\njulia\n CTMCEnsemble.build([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])])\n3\u00d73 Array{Float64,2}:\n -0.5   0.5   0.0\n  0.5  -1.0   0.5\n  0.0   0.5  -0.5\n\n\n\n\nsource\n\n\n#\n\n\nCTMCEnsemble.stationdist\n \n \nMethod\n.\n\n\nstationdist(G)\n\n\n\n\nCompute stationary probability distribution given generator $G$.\n\n\nExample\n\n\njulia\n G = CTMCEnsemble.build([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])]);\n\njulia\n CTMCEnsemble.stationdist(G)\n3-element Array{Float64,1}:\n 0.333333\n 0.333333\n 0.333333\n\n\n\n\nsource", 
            "title": "Home"
        }, 
        {
            "location": "/#ctmcensemblejl-documentation", 
            "text": "#  CTMCEnsemble.average     Function .  average(preds, weights=nothing; multiplicity=true)  Compute the average.  multiplicity  for arithmetic mean based on mulitpiliciity.  Example  julia  average([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])])\n3-element Array{Float64,1}:\n 0.333333\n 0.333333\n 0.333333\n\njulia  average([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])], multiplicity=false)\n3-element Array{Float64,1}:\n 0.25\n 0.5\n 0.25\n\njulia  A = [0.5 0.2 0.1 0.3; 0.5 0.8 0.9 0.7]\n2\u00d74 Array{Float64,2}:\n 0.5  0.2  0.1  0.3\n 0.5  0.8  0.9  0.7\n\njulia  B = [0.5 0.1 0.2 0.7; 0.5 0.9 0.8 0.3]\n2\u00d74 Array{Float64,2}:\n 0.5  0.1  0.2  0.7\n 0.5  0.9  0.8  0.3\n\njulia  average([(A, [1, 2]), (B, [2, 3])])\n3\u00d74 Array{Float64,2}:\n 0.333333  0.129032  0.0689655  0.230769\n 0.333333  0.290323  0.37931    0.538462\n 0.333333  0.580645  0.551724   0.230769\n\njulia  average([(A, [1, 2]), (B, [2, 3])], multiplicity=false)\n3\u00d74 Array{Float64,2}:\n 0.25  0.1   0.05  0.15\n 0.5   0.45  0.55  0.7\n 0.25  0.45  0.4   0.15  source  #  CTMCEnsemble.ctmc     Function .  ctmc(preds, weights=nothing)  Compute stationary distribution by CTMC method.  Example  julia  ctmc([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])])\n3-element Array{Float64,1}:\n 0.333333\n 0.333333\n 0.333333\n\njulia  A = [0.5 0.2 0.1 0.3; 0.5 0.8 0.9 0.7]\n2\u00d74 Array{Float64,2}:\n 0.5  0.2  0.1  0.3\n 0.5  0.8  0.9  0.7\n\njulia  B = [0.5 0.1 0.2 0.7; 0.5 0.9 0.8 0.3]\n2\u00d74 Array{Float64,2}:\n 0.5  0.1  0.2  0.7\n 0.5  0.9  0.8  0.3\n\njulia  ctmc([(A, [1, 2]), (B, [2, 3])])\n3\u00d74 Array{Float64,2}:\n 0.333333  0.0243902  0.0217391  0.230769\n 0.333333  0.097561   0.195652   0.538462\n 0.333333  0.878049   0.782609   0.230769  source  #  CTMCEnsemble.powermethod     Function .  powermethod(preds, weights=nothing; maxiter=16)  Compute stationary distribution by power method.  Example  julia  powermethod([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])], maxiter=16)\n3-element Array{Float64,1}:\n 0.333333\n 0.333333\n 0.333333\n\njulia  A = [0.5 0.2 0.1 0.3; 0.5 0.8 0.9 0.7]\n2\u00d74 Array{Float64,2}:\n 0.5  0.2  0.1  0.3\n 0.5  0.8  0.9  0.7\n\njulia  B = [0.5 0.1 0.2 0.7; 0.5 0.9 0.8 0.3]\n2\u00d74 Array{Float64,2}:\n 0.5  0.1  0.2  0.7\n 0.5  0.9  0.8  0.3\n\njulia  powermethod([(A, [1, 2]), (B, [2, 3])])\n3\u00d74 Array{Float64,2}:\n 0.333333  0.0244257  0.0217406  0.230769\n 0.333333  0.0976007  0.195655   0.538462\n 0.333333  0.877974   0.782604   0.230769  source  #  CTMCEnsemble.product     Function .  product(preds, weights=nothing; multiplicity=true)  Compute the product.  multiplicity  for geometric mean based on mulitpiliciity.  Example  julia  product([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])])\n3-element Array{Float64,1}:\n 0.333333\n 0.333333\n 0.333333\n\njulia  product([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])], multiplicity=false)\n3-element Array{Float64,1}:\n 0.4\n 0.2\n 0.4\n\njulia  A = [0.5 0.2 0.1 0.3; 0.5 0.8 0.9 0.7]\n2\u00d74 Array{Float64,2}:\n 0.5  0.2  0.1  0.3\n 0.5  0.8  0.9  0.7\n\njulia  B = [0.5 0.1 0.2 0.7; 0.5 0.9 0.8 0.3]\n2\u00d74 Array{Float64,2}:\n 0.5  0.1  0.2  0.7\n 0.5  0.9  0.8  0.3\n\njulia  product([(A, [1, 2]), (B, [2, 3])])\n3\u00d74 Array{Float64,2}:\n 0.333333  0.14463   0.0755136  0.230769\n 0.333333  0.204537  0.320377   0.538462\n 0.333333  0.650833  0.604109   0.230769\n\njulia  product([(A, [1, 2]), (B, [2, 3])], multiplicity=false)\n3\u00d74 Array{Float64,2}:\n 0.4  0.169492   0.0925926  0.275229\n 0.2  0.0677966  0.166667   0.449541\n 0.4  0.762712   0.740741   0.275229  source  #  CTMCEnsemble.softmax!     Method .  softmax!(data)  Inplace softmax col-wise.  Example  julia  p = [0.49  0.09  0.71  0.07  0.28\n            0.73  0.48  0.01  0.96  0.51\n            0.87  0.09  0.76  0.63  0.39\n            0.37  0.65  0.89  0.31  0.42\n            0.6   0.49  0.19  0.21  0.77\n            0.56  0.32  0.27  1.0   0.92\n            0.5   0.83  0.99  0.4   0.81\n            0.34  0.03  0.83  0.07  0.62\n            0.93  0.75  0.15  0.37  0.21\n            0.25  0.19  0.83  0.69  0.64];\n\njulia  softmax!(p)\n10\u00d75 Array{Float64,2}:\n 0.018823   0.0126174  0.0234549  0.0123676  0.0152576\n 0.0239287  0.0186357  0.0116474  0.0301167  0.0192033\n 0.0275246  0.0126174  0.0246575  0.0216516  0.0170318\n 0.0166945  0.022089   0.0280806  0.0157223  0.0175504\n 0.0210117  0.018823   0.0139444  0.0142261  0.0249053\n 0.0201878  0.0158803  0.0151058  0.0313458  0.0289358\n 0.0190122  0.0264453  0.0310339  0.0172029  0.0259217\n 0.0162011  0.0118827  0.0264453  0.0123676  0.0214362\n 0.0292266  0.0244121  0.0133977  0.0166945  0.0142261\n 0.0148067  0.0139444  0.0264453  0.0229905  0.0218692  source  #  CTMCEnsemble.svdmethod     Function .  svdmethod(preds, weights=nothing; maxiter=16)  Compute stationary distribution by svd method.  Example  julia  svdmethod([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])])\n3-element Array{Float64,1}:\n 0.333333\n 0.333333\n 0.333333\n\njulia  A = [0.5 0.2 0.1 0.3; 0.5 0.8 0.9 0.7]\n2\u00d74 Array{Float64,2}:\n 0.5  0.2  0.1  0.3\n 0.5  0.8  0.9  0.7\n\njulia  B = [0.5 0.1 0.2 0.7; 0.5 0.9 0.8 0.3]\n2\u00d74 Array{Float64,2}:\n 0.5  0.1  0.2  0.7\n 0.5  0.9  0.8  0.3\n\njulia  svdmethod([(A, [1, 2]), (B, [2, 3])])\n3\u00d74 Array{Float64,2}:\n 0.333333  0.0243902  0.0217391  0.230769\n 0.333333  0.097561   0.195652   0.538462\n 0.333333  0.878049   0.782609   0.230769  source  #  CTMCEnsemble.top1     Method .  top1(data, label)  Top-1 accuracy.  Example  julia  p = [0.333333  0.0243902  0.0217391  0.230769\n            0.333333  0.097561   0.195652   0.538462\n            0.333333  0.878049   0.782609   0.230769];\n\njulia  top1(p, [1, 3, 3, 2])\n1.0  source  #  CTMCEnsemble.top5     Method .  top5(data, label)  Top-5 accuracy.  Example  julia  p = [0.49  0.09  0.71  0.07  0.28\n            0.73  0.48  0.01  0.96  0.51\n            0.87  0.09  0.76  0.63  0.39\n            0.37  0.65  0.89  0.31  0.42\n            0.6   0.49  0.19  0.21  0.77\n            0.56  0.32  0.27  1.0   0.92\n            0.5   0.83  0.99  0.4   0.81\n            0.34  0.03  0.83  0.07  0.62\n            0.93  0.75  0.15  0.37  0.21\n            0.25  0.19  0.83  0.69  0.64];\n\njulia  top5(p, 1:5)\n0.6  source  #  CTMCEnsemble.build     Function .  build(preds, weights=nothing; nclass=0)  Build the generator matrix.  Example  julia  CTMCEnsemble.build([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])])\n3\u00d73 Array{Float64,2}:\n -0.5   0.5   0.0\n  0.5  -1.0   0.5\n  0.0   0.5  -0.5  source  #  CTMCEnsemble.stationdist     Method .  stationdist(G)  Compute stationary probability distribution given generator $G$.  Example  julia  G = CTMCEnsemble.build([([0.5, 0.5], [1, 2]), ([0.5, 0.5], [2, 3])]);\n\njulia  CTMCEnsemble.stationdist(G)\n3-element Array{Float64,1}:\n 0.333333\n 0.333333\n 0.333333  source", 
            "title": "CTMCEnsemble.jl Documentation"
        }
    ]
}